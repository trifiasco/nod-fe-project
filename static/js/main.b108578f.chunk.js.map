{"version":3,"sources":["logo.svg","components/navbar/navbar-view.js","components/form/form-styles.js","components/formComponents/genericTextField/genericTextField-view.js","components/formComponents/datePicker/datePicker-view.js","components/formComponents/phoneNumberField/phoneNumber-styles.js","components/formComponents/phoneNumberField/phoneNumber-view.js","components/formComponents/selectField/selectField-styles.js","components/formComponents/selectField/selectField-view.js","components/formComponents/progressBar/progressBar-view.js","components/form/form-view.js","utils/options.js","components/form/form-container.js","pages/main/main-styles.js","pages/main/main-view.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","AppBar","position","Toolbar","Typography","useStyles","makeStyles","formButton","top","left","formActions","marginTop","background","formHeader","GenericTextField","props","id","label","type","field","value","onChange","descriptions","hasTooltip","hasOwnProperty","useState","error","setError","hintText","setHintText","currentValue","setCurrentValue","element","TextField","margin","inputProps","fullWidth","event","validator","isEmail","target","helperText","Tooltip","arrow","title","aria-label","defaultProps","DatePicker","FormControl","utils","DateFnsUtils","Grid","container","justify","format","date","toISOString","KeyboardButtonProps","Date","root","width","PhoneNumberField","classes","className","defaultCountry","val","isValidNumber","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","SelectField","variant","currentOptions","isMultiple","tooltip","selected","setSelected","selectElement","InputLabel","Select","labelId","multiple","input","Input","renderValue","join","map","option","MenuItem","key","Checkbox","checked","indexOf","ListItemText","primary","ProgressBar","Box","display","alignItems","mr","LinearProgress","minWidth","color","Math","round","Form","onSubmit","currentFields","genders","recommendations","progress","open","handleClickClose","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","firstName","lastName","dob","email","address","phone","gender","recommendation","DialogActions","Button","onClick","disabled","defaultFields","CsvOptions","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","useTextFile","useBom","useKeysAsHeaders","FormContainer","setCurrentFields","setProgress","ExportToCsv","generateCsv","newCurrentFields","current","Object","keys","forEach","Array","isArray","length","currentPercentage","ceil","handleProgress","descriptionArea","Main","setOpen","size","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b108578f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst Navbar = () => {\n    return (\n        <div>\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography>\n                        NOD Frontend Challenge\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Navbar;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    formButton: {\n        position: 'absolute',\n        top: '30%',\n        left: '40%',\n    },\n    formActions: {\n        marginTop: '20px',\n        background: 'darkGray'\n    },\n    formHeader: {\n        background: 'darkGray',\n    }\n}));\n\nexport default useStyles;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport validator from 'validator';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst GenericTextField = (props) => {\n\n    const { id, label, type, field, value, onChange, descriptions} = props;\n\n    const hasTooltip = descriptions.hasOwnProperty(field);\n    const tooltip = descriptions[field];\n\n    const [error, setError] = useState(false);\n    const [hintText, setHintText] = useState('');\n    const [currentValue, setCurrentValue] = useState(value);\n\n    const handleChange = event => {\n        if((field === 'email' && !validator.isEmail(event.target.value))){\n            setError(true);\n            setHintText('Invalid email address');\n            setCurrentValue(event.target.value);\n            onChange('', field)\n            return;\n        }\n        setError(false);\n        setHintText('');\n        setCurrentValue(event.target.value);\n        onChange(event.target.value, field);\n    };\n    \n    const element = (\n    <TextField\n        margin=\"dense\"\n        inputProps={{ \"data-testid\": `${label}` }}\n        id={id}\n        label={label}\n        type={type}\n        fullWidth\n        value={currentValue}\n        onChange={handleChange}\n        helperText={hintText}\n        error={error}\n    />);\n\n    return (\n        <div>\n            {hasTooltip ? (\n                <Tooltip arrow title={descriptions[field]} aria-label={descriptions[field]}>\n                    {element}\n                </Tooltip>\n            ) : element\n            }\n            \n        </div>\n    );\n};\n\nGenericTextField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    type: PropTypes.string,\n    field: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    descriptions: PropTypes.object,\n}\n\nGenericTextField.defaultProps = {\n    id: 'field',\n    label: 'label',\n    type: 'text',\n    field: 'firstName',\n    value: '',\n    onChange: () => {},\n    descriptions: {}\n}\n\nexport default GenericTextField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { FormControl } from '@material-ui/core';\n\nconst DatePicker = (props) => {\n\n    const {id, label, value, field, onChange} = props;\n\n    return (\n        <div>\n            <FormControl fullWidth>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id={id}\n                        inputProps={{ \"data-testid\": `${label}` }}\n                        label={label}\n                        value={value}\n                        onChange={(date) => onChange(date.toISOString(), field)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date'\n                        }}\n                        fullWidth\n                    />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </FormControl>\n            \n        </div>\n    );\n};\n\nDatePicker.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.instanceOf(null), PropTypes.string]),\n    field: PropTypes.string,\n    onChange: PropTypes.func,\n}\n\nDatePicker.defaultProps = {\n    id: 'dob',\n    label: 'date of birth',\n    value: new Date(),\n    field: 'dob',\n    onChange: () => {}\n\n}\n\nexport default DatePicker;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n        marginTop: '16px',\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport MuiPhoneNumber from 'material-ui-phone-number';\nimport {isValidNumber} from 'libphonenumber-js';\nimport useStyles from './phoneNumber-styles';\nimport { FormControl } from '@material-ui/core';\n\nconst PhoneNumberField = (props) => {\n\n    const classes = useStyles();\n\n    const { id, label, field, value, onChange } = props;\n\n    const [error, setError] = useState(false);\n    const [hintText, setHintText] = useState('');\n\n    const handleOnChange = val => {\n        if(!isValidNumber(val)){\n            setError(true);\n            setHintText('Invalid Phone Number');\n            return;\n        }\n        setError(false);\n        setHintText('');\n        onChange(val, field);\n    }\n\n    return (\n        <div>\n            <FormControl className={classes.root}>\n                <MuiPhoneNumber error={error} helperText={hintText} inputProps={{ \"data-testid\": `${label}` }} label={label} id={id} defaultCountry={'us'} onChange={handleOnChange} />\n            </FormControl>\n            \n        </div>\n    );\n};\n\nPhoneNumberField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n}\n\nPhoneNumberField.defaultProps = {\n    id: 'field',\n    label: 'label',\n}\n\nexport default PhoneNumberField;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%'\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, Input, InputLabel, Select, MenuItem, Checkbox, ListItemText, Tooltip } from '@material-ui/core';\nimport useStyles from './selectField-styles';\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst SelectField = (props) => {\n    const classes = useStyles();\n    const { id, label, variant, currentOptions, value, field, onChange, descriptions } = props;\n    const isMultiple = variant === 'multiple';\n    const hasTooltip = descriptions.hasOwnProperty(field);\n    const tooltip = hasTooltip ? descriptions[field] : '';\n\n    const [selected, setSelected] = useState(value);\n\n    const handleChange = event => {\n        setSelected(event.target.value);\n        onChange(event.target.value, field);\n    };\n\n    const selectElement = (\n        <div>\n            <FormControl className={classes.root}>\n                <InputLabel id={`${id}-label`}>\n                    {label}\n                </InputLabel>\n                <Select\n                    labelId={`${id}-checkbox-label`}\n                    id={`${id}-checkbox`}\n                    multiple={isMultiple}\n                    value={selected}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => isMultiple ? selected.join(', ') : selected}\n                    MenuProps={MenuProps}\n                    inputProps={{ \"data-testid\": `${label}` }}\n                >\n                    {currentOptions.map((option) => (\n                        <MenuItem key={option} value={option}>\n                            <Checkbox checked={selected.indexOf(option) > -1} />\n                            <ListItemText primary={option} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n\n\n\n    return hasTooltip ? (\n        <Tooltip title={tooltip}>{selectElement}</Tooltip>\n    ) : selectElement;\n};\n\nSelectField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    variant: PropTypes.string,\n    field: PropTypes.string,\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func,\n    currentOptions: PropTypes.array,\n    descriptions: PropTypes.object,\n}\n\nSelectField.defaultProps = {\n    id: 'field',\n    label: 'label',\n    variant: 'single',\n    field: 'select',\n    value: ['1'],\n    onChange: () => {},\n    currentOptions: ['1', '2', '3'],\n    descriptions: {}\n}\n\nexport default SelectField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {LinearProgress, Typography, Box} from '@material-ui/core';\n\nconst ProgressBar = props => {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n\nProgressBar.propTypes = {\n    value: PropTypes.number\n}\n\nProgressBar.defaultProps = {\n    value:20\n}\n\nexport default ProgressBar;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { \n    Dialog, \n    DialogTitle, \n    DialogContent, \n    DialogActions } from '@material-ui/core';\nimport useStyles from './form-styles';\n\nimport GenericTextField from '../formComponents/genericTextField';\nimport DatePicker from '../formComponents/datePicker';\nimport PhoneNumberField from '../formComponents/phoneNumberField';\nimport SelectField from '../formComponents/selectField';\nimport ProgressBar from '../formComponents/progressBar';\n\nconst Form = (props) => {\n    const {onSubmit, onChange, currentFields, genders, recommendations, progress, descriptions} = props;\n\n    const classes = useStyles();\n\n    const {open, handleClickClose} = props;\n\n    return (\n        <div>\n            <Dialog fullWidth open={open} onClose={handleClickClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle className={classes.formHeader} id=\"form-dialog-title\">NOD Form</DialogTitle>\n                <DialogContent>\n                    <form>\n                        <ProgressBar value={progress} />\n                        <GenericTextField\n                            id=\"first-name\"\n                            label=\"First Name\"\n                            type=\"text\"\n                            field='firstName'\n                            value={currentFields.firstName}\n                            {...{onChange, descriptions}}\n                        />\n\n                        <GenericTextField\n                            id=\"last-name\"\n                            label=\"Last Name\"\n                            type=\"text\"\n                            field='lastName'\n                            value={currentFields.lastName}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <DatePicker\n                            id=\"dob\"\n                            label=\"Date of Birth\"\n                            field=\"dob\"\n                            value={currentFields.dob}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <GenericTextField\n                            id=\"email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            field='email'\n                            value={currentFields.email}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <GenericTextField\n                            id=\"address\"\n                            label=\"Address\"\n                            type=\"text\"\n                            field='address'\n                            value={currentFields.address}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <PhoneNumberField\n                            id=\"phone\"\n                            label=\"Phone Number\"\n                            field='phone'\n                            value={currentFields.phone}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <SelectField\n                         id=\"gender\"\n                         label=\"Gender\"\n                         field=\"gender\"\n                         variant=\"single\"\n                         currentOptions={genders}\n                         value={currentFields.gender}\n                            {...{ onChange, descriptions }}\n                        />\n\n                        <SelectField\n                            id=\"recommendation\"\n                            label=\"Areas of Recommendation\"\n                            field=\"recommendation\"\n                            variant=\"multiple\"\n                            currentOptions={recommendations}\n                            value={currentFields.recommendation}\n                            {...{ onChange, descriptions }}\n                        />\n\n\n                    </form>\n                </DialogContent>\n                <DialogActions className={classes.formActions}>\n                    <Button onClick={handleClickClose} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button disabled={progress !== 100} onClick={onSubmit} variant=\"contained\" color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n\n};\n\nexport default Form;","const genders = [\n    \"Female\", \"Male\", \"Other\"\n];\n\nconst recommendations = [\n    \"Insurance\",\n    \"Superannuation\",\n    \"Investments\",\n    \"Cashflow\",\n    \"Pension\",\n    \"Estate Planning\"\n];\n\nconst descriptions = {\n    \"email\": \"The customers primary contact email address\",\n    \"address\": \"The customers current residential address\",\n    \"recommendation\": \"Select all of the areas that you are providing a recommendation for\"\n}\n\n\nexport {genders, recommendations, descriptions};","import React, {useState} from 'react';\nimport { ExportToCsv } from 'export-to-csv';\nimport Form from './form-view';\nimport {genders, recommendations, descriptions} from '../../utils/options';\n\nconst defaultFields = {\n    firstName: '',\n    lastName: '',\n    dob: null,\n    email: '',\n    address: '',\n    phone: '',\n    gender: [],\n    recommendation: []\n};\n\nconst CsvOptions = {\n    fieldSeparator: ',',\n    quoteStrings: '\"',\n    decimalSeparator: '.',\n    showLabels: true,\n    showTitle: true,\n    title: 'NOD form data',\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true,\n};\n\nconst TOTAL_ELEMENT = 8;\n\nconst FormContainer = props => {\n    const { handleClickClose } = props;\n    const [currentFields, setCurrentFields] = useState(defaultFields);\n    const [progress, setProgress] = useState(0);\n    // const [completed, setCompleted] = useState(0);\n    \n    const handleProgress = (newCurrentFields) => {\n        let current = 0;\n        Object.keys(newCurrentFields).forEach(key => {\n            const value = newCurrentFields[key];\n            if((Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && value)){\n                current += 1;\n            }\n            return;\n        });\n        const currentPercentage = Math.ceil((current / TOTAL_ELEMENT) * 100);\n        setProgress(currentPercentage);\n    };\n\n    const onChange = (value, field) => {\n        const newCurrentFields = {...currentFields, [field]: value};\n        setCurrentFields(newCurrentFields);\n        handleProgress(newCurrentFields);\n    };\n\n    const onSubmit = () => {\n        // const currentData = {...currentFields};\n        const csvExporter = new ExportToCsv(CsvOptions);\n\n        csvExporter.generateCsv([currentFields]);\n        setCurrentFields(defaultFields);\n        handleClickClose();\n    }\n\n    return (\n        <Form {...props} {...{onSubmit, onChange, currentFields, genders, recommendations, progress, descriptions}}/>\n    );\n};\n\nexport default FormContainer;","import {makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    formButton: {\n        position: 'absolute',\n        top: '30%',\n        left: '45%',\n    },\n    descriptionArea: {\n        position: 'absolute',\n        top: '90%',\n        left: '40%'\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Navbar from '../../components/navbar';\nimport Form from '../../components/form';\nimport useStyles from './main-styles';\n\nconst Main = () => {\n\n    const classes = useStyles();\n\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClickClose = () => {\n        setOpen(false);\n    }\n\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className={classes.formButton}>\n                <Button variant=\"outlined\" size=\"large\" color=\"primary\" onClick={handleClickOpen}>\n                    Open form\n                </Button>\n            </div>\n\n            <Form {...{open, handleClickClose}}/>\n\n            <div className={classes.descriptionArea}>\n                <Button variant=\"outlined\" size=\"large\" color=\"primary\">\n                    <a href=\"https://github.com/trifiasco/nod-fe-project/\" target=\"__blank\">See code on Github</a>\n                </Button>\n            </div>\n        </div>\n    );\n\n};\n\nexport default Main;","import React from 'react';\nimport Main from './pages/main'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}