{"version":3,"sources":["logo.svg","components/navbar/navbar-view.js","components/form/form-styles.js","components/formComponents/genericTextField/genericTextField-view.js","components/formComponents/datePicker/datePicker-view.js","components/formComponents/phoneNumberField/phoneNumber-styles.js","components/formComponents/phoneNumberField/phoneNumber-view.js","components/formComponents/selectField/selectField-styles.js","components/formComponents/selectField/selectField-view.js","components/formComponents/progressBar/progressBar-view.js","components/form/form-view.js","utils/options.js","components/form/form-container.js","pages/main/main-styles.js","pages/main/main-view.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","AppBar","position","Toolbar","Typography","useStyles","makeStyles","formButton","top","left","formActions","marginTop","background","formHeader","GenericTextField","props","id","label","type","field","value","onChange","TextField","margin","fullWidth","event","target","defaultProps","DatePicker","FormControl","utils","DateFnsUtils","Grid","container","justify","format","date","toISOString","KeyboardButtonProps","root","width","PhoneNumberField","classes","useState","error","setError","hintText","setHintText","className","helperText","defaultCountry","val","isValidNumber","console","log","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","SelectField","variant","currentOptions","isMultiple","selected","setSelected","InputLabel","Select","labelId","multiple","input","Input","renderValue","join","map","option","MenuItem","key","Checkbox","checked","indexOf","ListItemText","primary","ProgressBar","Box","display","alignItems","mr","LinearProgress","minWidth","color","Math","round","Form","onSubmit","currentFields","genders","recommendations","progress","open","handleClickClose","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","firstName","lastName","dob","email","address","phone","gender","recommendation","DialogActions","Button","onClick","disabled","defaultFields","CsvOptions","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","FormContainer","setCurrentFields","setProgress","ExportToCsv","generateCsv","newCurrentFields","current","Object","keys","forEach","Array","isArray","length","currentPercentage","ceil","handleProgress","Main","setOpen","size","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ee0a4fe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst Navbar = () => {\n    return (\n        <div>\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography>\n                        NOD Frontend Challenge\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Navbar;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    formButton: {\n        position: 'absolute',\n        top: '30%',\n        left: '40%',\n    },\n    formActions: {\n        marginTop: '20px',\n        background: 'darkGray'\n    },\n    formHeader: {\n        background: 'darkGray',\n    }\n}));\n\nexport default useStyles;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\n\nconst GenericTextField = (props) => {\n\n    const { id, label, type, field, value, onChange} = props;\n\n    const handleChange = event => {\n        onChange(event.target.value, field);\n    };\n    \n    return (\n        <div>\n            <TextField\n                margin=\"dense\"\n                id={id}\n                label={label}\n                type={type}\n                fullWidth\n                value={value}\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nGenericTextField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    type: PropTypes.string,\n    field: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n}\n\nGenericTextField.defaultProps = {\n    id: 'field',\n    label: 'label',\n    type: 'text',\n    field: 'firstName',\n    value: '',\n    onChange: () => {},\n}\n\nexport default GenericTextField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { FormControl } from '@material-ui/core';\n\nconst DatePicker = (props) => {\n\n    const {id, label, value, field, onChange} = props;\n\n    return (\n        <div>\n            <FormControl fullWidth>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        format=\"MM/dd/yyyy\"\n                        margin=\"normal\"\n                        id={id}\n                        label={label}\n                        value={value}\n                        onChange={(date) => onChange(date.toISOString(), field)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date'\n                        }}\n                        fullWidth\n                    />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </FormControl>\n            \n        </div>\n    );\n};\n\nDatePicker.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    value: PropTypes.instanceOf(Date) || PropTypes.instanceOf(null),\n    field: PropTypes.string,\n    onChange: PropTypes.func,\n}\n\nDatePicker.defaultProps = {\n    id: 'dob',\n    label: 'date of birth',\n    value: '02/02/2020',\n    field: 'dob',\n    onChange: () => {}\n\n}\n\nexport default DatePicker;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n        marginTop: '16px',\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport MuiPhoneNumber from 'material-ui-phone-number';\nimport {isValidNumber} from 'libphonenumber-js';\nimport useStyles from './phoneNumber-styles';\nimport { FormControl } from '@material-ui/core';\n\nconst PhoneNumberField = (props) => {\n\n    const classes = useStyles();\n\n    const { id, label, field, value, onChange } = props;\n\n    const [error, setError] = useState(false);\n    const [hintText, setHintText] = useState('');\n\n    const handleOnChange = val => {\n        if(!isValidNumber(val)){\n            console.log('here');\n            setError(true);\n            setHintText('Invalid Phone Number');\n            return;\n        }\n        setError(false);\n        setHintText('');\n        onChange(val, field);\n        console.log('send to onchange: ', val)\n    }\n\n    return (\n        <div>\n            <FormControl className={classes.root}>\n                <MuiPhoneNumber error={error} helperText={hintText}  id={id} defaultCountry={'us'} onChange={handleOnChange} />\n            </FormControl>\n            \n        </div>\n    );\n};\n\nPhoneNumberField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n}\n\nPhoneNumberField.defaultProps = {\n    id: 'field',\n    label: 'label',\n}\n\nexport default PhoneNumberField;","import { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%'\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, Input, InputLabel, Select, MenuItem, Checkbox, ListItemText } from '@material-ui/core';\nimport useStyles from './selectField-styles';\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst SelectField = (props) => {\n    const classes = useStyles();\n    const { id, label, variant, currentOptions, value, field, onChange } = props;\n    const isMultiple = variant === 'multiple';\n\n    const [selected, setSelected] = useState(value);\n\n    const handleChange = event => {\n        setSelected(event.target.value);\n        onChange(event.target.value, field);\n    };\n\n    return (\n        <div>\n            <FormControl className={classes.root}>\n                <InputLabel id={`${id}-label`}>\n                    {label}\n                </InputLabel>\n                <Select\n                    labelId={`${id}-checkbox-label`}\n                    id={`${id}-checkbox`}\n                    multiple={isMultiple}\n                    value={selected}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => isMultiple ? selected.join(', ') : selected }\n                    MenuProps = {MenuProps}\n                >\n                    {currentOptions.map((option) => (\n                        <MenuItem key={option} value={option}>\n                            <Checkbox checked={selected.indexOf(option) > -1} />\n                            <ListItemText primary={option} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n};\n\nSelectField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    variant: PropTypes.string,\n    field: PropTypes.string,\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func,\n    currentOptions: PropTypes.array\n}\n\nSelectField.defaultProps = {\n    id: 'field',\n    label: 'label',\n    variant: 'single',\n    field: 'select',\n    value: ['1'],\n    onChange: () => {},\n    currentOptions: ['1', '2', '3']\n}\n\nexport default SelectField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {LinearProgress, Typography, Box} from '@material-ui/core';\n\nconst ProgressBar = props => {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <LinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n                    props.value,\n                )}%`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n\nProgressBar.propTypes = {\n    value: PropTypes.number\n}\n\nProgressBar.defaultProps = {\n    value:20\n}\n\nexport default ProgressBar;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { \n    Dialog, \n    DialogTitle, \n    DialogContent, \n    DialogActions } from '@material-ui/core';\nimport useStyles from './form-styles';\n\nimport GenericTextField from '../formComponents/genericTextField';\nimport DatePicker from '../formComponents/datePicker';\nimport PhoneNumberField from '../formComponents/phoneNumberField';\nimport SelectField from '../formComponents/selectField';\nimport ProgressBar from '../formComponents/progressBar';\n\nconst Form = (props) => {\n    const {onSubmit, onChange, currentFields, genders, recommendations, progress} = props;\n\n    const classes = useStyles();\n\n    const {open, handleClickClose} = props;\n\n    return (\n        <div>\n            <Dialog fullWidth open={open} onClose={handleClickClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle className={classes.formHeader} id=\"form-dialog-title\">NOD Form</DialogTitle>\n                <DialogContent>\n                    <form>\n                        <ProgressBar value={progress} />\n                        <GenericTextField\n                            id=\"first-name\"\n                            label=\"First Name\"\n                            type=\"text\"\n                            field='firstName'\n                            value={currentFields.firstName}\n                            {...{onChange}}\n                        />\n\n                        <GenericTextField\n                            id=\"last-name\"\n                            label=\"Last Name\"\n                            type=\"text\"\n                            field='lastName'\n                            value={currentFields.lastName}\n                            {...{ onChange }}\n                        />\n\n                        <DatePicker\n                            id=\"dob\"\n                            label=\"Date of Birth\"\n                            field=\"dob\"\n                            value={currentFields.dob}\n                            {...{onChange}}\n                        />\n\n                        <GenericTextField\n                            id=\"email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            field='email'\n                            value={currentFields.email}\n                            {...{ onChange }}\n                        />\n\n                        <GenericTextField\n                            id=\"address\"\n                            label=\"Address\"\n                            type=\"text\"\n                            field='address'\n                            value={currentFields.address}\n                            {...{ onChange }}\n                        />\n\n                        <PhoneNumberField\n                            id=\"phone\"\n                            label=\"Phone Number\"\n                            field='phone'\n                            value={currentFields.phone}\n                            {...{ onChange }}\n                        />\n\n                        <SelectField\n                         id=\"gender\"\n                         label=\"Gender\"\n                         field=\"gender\"\n                         variant=\"single\"\n                         currentOptions={genders}\n                         value={currentFields.gender}\n                         {...{ onChange }}\n                        />\n\n                        <SelectField\n                            id=\"recommendation\"\n                            label=\"Areas of Recommendation\"\n                            field=\"recommendation\"\n                            variant=\"multiple\"\n                            currentOptions={recommendations}\n                            value={currentFields.recommendation}\n                            {...{ onChange }}\n                        />\n\n\n                    </form>\n                </DialogContent>\n                <DialogActions className={classes.formActions}>\n                    <Button onClick={handleClickClose} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button disabled={progress !== 100} onClick={onSubmit} variant=\"contained\" color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n\n};\n\nexport default Form;","const genders = [\n    \"Female\", \"Male\", \"Other\"\n];\n\nconst recommendations = [\n    \"Insurance\",\n    \"Superannuation\",\n    \"Investments\",\n    \"Cashflow\",\n    \"Pension\",\n    \"Estate Planning\"\n];\n\nexport {genders, recommendations};","import React, {useState} from 'react';\nimport { ExportToCsv } from 'export-to-csv';\nimport Form from './form-view';\nimport {genders, recommendations} from '../../utils/options';\n\nconst defaultFields = {\n    firstName: '',\n    lastName: '',\n    dob: null,\n    email: '',\n    address: '',\n    phone: '',\n    gender: [],\n    recommendation: []\n};\n\nconst CsvOptions = {\n    fieldSeparator: ',',\n    quoteStrings: '\"',\n    decimalSeparator: '.',\n    showLabels: true,\n    showTitle: true,\n    title: 'NOD form data',\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true,\n};\n\nconst TOTAL_ELEMENT = 8;\n\nconst FormContainer = props => {\n    const { handleClickClose } = props;\n    const [currentFields, setCurrentFields] = useState(defaultFields);\n    const [progress, setProgress] = useState(0);\n    // const [completed, setCompleted] = useState(0);\n    \n    const handleProgress = (newCurrentFields) => {\n        let current = 0;\n        console.log(newCurrentFields);\n        Object.keys(newCurrentFields).forEach(key => {\n            const value = newCurrentFields[key];\n            if((Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && value)){\n                console.log('item: ', key);\n                current += 1;\n            }\n            return;\n        });\n        const currentPercentage = Math.ceil((current / TOTAL_ELEMENT) * 100);\n        setProgress(currentPercentage);\n    };\n\n    const onChange = (value, field) => {\n        console.log(value, field);\n        const newCurrentFields = {...currentFields, [field]: value};\n        setCurrentFields(newCurrentFields);\n        handleProgress(newCurrentFields);\n    };\n\n    const onSubmit = () => {\n        // const currentData = {...currentFields};\n        const csvExporter = new ExportToCsv(CsvOptions);\n\n        csvExporter.generateCsv([currentFields]);\n        setCurrentFields(defaultFields);\n        handleClickClose();\n    }\n\n    return (\n        <Form {...props} {...{onSubmit, onChange, currentFields, genders, recommendations, progress}}/>\n    );\n};\n\nexport default FormContainer;","import {makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n    formButton: {\n        position: 'absolute',\n        top: '30%',\n        left: '40%',\n    }\n}));\n\nexport default useStyles;","import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Navbar from '../../components/navbar';\nimport Form from '../../components/form';\nimport useStyles from './main-styles';\n\nconst Main = () => {\n\n    const classes = useStyles();\n\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClickClose = () => {\n        setOpen(false);\n    }\n\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className={classes.formButton}>\n                <Button variant=\"outlined\" size=\"large\" color=\"primary\" onClick={handleClickOpen}>\n                    Open form\n                </Button>\n            </div>\n\n            <Form {...{open, handleClickClose}}/>\n        </div>\n    );\n\n};\n\nexport default Main;","import React from 'react';\nimport Main from './pages/main'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}